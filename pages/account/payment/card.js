import { useRouter } from 'next/router';
import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { useTranslation } from 'next-i18next';
import AccountLayout from '../../../components/AccountLayout';
import AccountPaymentNavbar from '../../../components/navbars/AccountPaymentNavbar';
import AccountSidebar from '../../../components/sidebars/AccountSidebar';
import { arrayToFormData } from '../../../utils/functions';
import { post } from '../../../utils/request';
import withSession from '../../../utils/session';
import { serverSideTranslations } from 'next-i18next/serverSideTranslations';

export default function Card() {
    const { t, i18n } = useTranslation();

    const router = useRouter();

    const [isLoading, setIsLoading] = useState(false);

    const [key, setKey] = React.useState(undefined);

    const defaultValues = {
        currency: router.query.currency || ""
    };

    const { register, handleSubmit, watch, formState: { errors }, reset, setValue } = useForm({ defaultValues });

    const onSubmit = async (data) => {
        setIsLoading(true);

        let res = await post(`account/subscribe-card`, arrayToFormData({
            seria: data.seria.replaceAll(" ", ""),
            expire: data.expire.replace("/", "")
        }));

        setIsLoading(false);
    }

    return (
        <AccountLayout>
            <div className="rizanova-payment">
                <div className="container min-view">
                    <h1 className="big-header font-weight-400">{t("Профиль")}</h1>

                    <div className="row">
                        <div className="col-md-4 col-lg-3">
                            <AccountSidebar />
                        </div>
                        <div className="col-md-8 col-lg-9">
                            <AccountPaymentNavbar />

                            <form className="payment-form card position-relative" onSubmit={handleSubmit(onSubmit)}>
                                <div className="payment-text text-start fs-18">
                                    {t("Введите реквизиты банковской карты")}
                                </div>

                                <div className="d-flex mb-3">
                                    <div>
                                        <label htmlFor="serial" className="d-block mb-2 card-label">{t("Серийный номер")}</label>
                                        <input type="text" id="serial" autoFocus="autofocus" className="serial" placeholder={t("0000 0000 0000 0000")} {...register("seria", { required: true, pattern: /[0-9]{4} [0-9]{4} [0-9]{4} [0-9]{4}/ })} onInput={(e) => {
                                            let val = e.target.value.replace(/\D+/g, '').replaceAll(" ", "").split("");

                                            let cursor = e.target.selectionStart;

                                            if (key != "Backspace" && key != "Delete") {
                                                if (val.length === 5) cursor++;
                                                if (val.length === 9) cursor++;
                                                if (val.length === 13) cursor++;
                                            }

                                            if (val.length > 16) val = val.filter((v, i) => i < 16);

                                            let newVal = "";

                                            for (let i = 0; i < val.length; i++) {
                                                newVal += val[i];

                                                if (i != 0 && (i + 1) % 4 === 0 && i != 15) {
                                                    newVal += " ";
                                                }
                                            }

                                            setValue("seria", newVal.trim());

                                            e.target.setSelectionRange(cursor, cursor);
                                        }} onKeyDown={event => setKey(event.key)} />
                                        <span className="errors w-100 d-block">{errors.seria?.type === 'pattern' ? t("Неверный серийный номер") : ""}</span>
                                    </div>
                                    <div>
                                        <label htmlFor="expire" className="d-block mb-2 card-label">{t("Срок")}</label>

                                        <input type="text" className="expire" id="expire" placeholder={t("ММ/ГГ")} {...register("expire", { required: true, pattern: /[0-9]{2}\/[0-9]{2}/ })} onInput={(e) => {
                                            let val = e.target.value.replace(/\D+/g, '').replaceAll("/", "").split("");
                                            let cursor = e.target.selectionStart;

                                            if (key != "Backspace" && key != "Delete") {
                                                if (val.length >= 2) cursor++;
                                            }

                                            if (val.length > 4) val = val.filter((v, i) => i < 4);

                                            let newVal = "";

                                            for (let i = 0; i < val.length; i++) {
                                                newVal += val[i];

                                                if (i != 0 && (i + 1) % 2 === 0 && i != 3) {
                                                    if (val.length != 2 || key != "Backspace")
                                                        newVal += "/";
                                                }
                                            }
                                            setValue("expire", newVal.trim());
                                            e.target.setSelectionRange(cursor, cursor);
                                        }} onKeyDown={event => setKey(event.key)} />
                                        <span className="errors w-100 d-block">{errors.expire?.type === 'pattern' ? t("Неверный срок") : ""}</span>
                                    </div>
                                </div>
                                <button type="submit" disabled={isLoading}>{t("Добавить")}</button>

                                <div className="powered-by d-flex mb-0 justify-content-end">
                                    {/* Pay[me] */}
                                    <div>
                                        <p className="mb-0">Powered by</p>
                                        <svg width="80" height="23" viewBox="0 0 112 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path className='must-change' d="M18.3506 3.1661C17.9587 2.54216 17.4475 1.99868 16.8453 1.56566C16.2364 1.15761 15.5697 0.839795 14.8666 0.622409C14.1022 0.377153 13.3132 0.213377 12.5131 0.133913C11.5771 0.0444545 10.6371 0.00185865 9.6967 0.00628891H1.55505C1.18108 -0.0280273 0.808521 0.0847357 0.519063 0.319855C0.229605 0.554975 0.0468774 0.893259 0.0109458 1.26053C0.0109458 1.2752 0.0109458 1.2884 0.0109458 1.3016V14.3574C1.1383 16.7381 3.01174 18.7018 5.35708 19.9612V17.3544C5.32105 16.9486 5.45059 16.5454 5.7172 16.2334C5.98381 15.9215 6.36565 15.7263 6.77873 15.6909H9.22481C12.5569 15.6909 15.0996 15.0063 16.8527 13.6372C18.6059 12.268 19.4964 10.2368 19.5243 7.54347C19.5262 6.7676 19.4329 5.99433 19.2466 5.24036C19.0612 4.50681 18.7588 3.80672 18.3506 3.1661ZM13.5809 9.83924C13.2963 10.3191 12.874 10.7059 12.3668 10.9512C11.8174 11.2091 11.2238 11.3638 10.6166 11.4074C9.94929 11.4886 9.27748 11.5287 8.60507 11.5277H6.26054C5.69905 11.5277 5.34961 11.0788 5.34961 10.4231V5.06873C5.34231 4.964 5.35611 4.85888 5.39023 4.7594C5.42435 4.65991 5.47812 4.56802 5.54845 4.48899C5.61878 4.40995 5.7043 4.34532 5.8001 4.2988C5.89589 4.25229 6.00009 4.22479 6.10673 4.21789C6.15638 4.21306 6.20641 4.21306 6.25606 4.21789H8.6006C9.3612 4.21789 10.078 4.23941 10.751 4.28244C11.3527 4.31209 11.9429 4.45554 12.4892 4.70492C12.9907 4.9239 13.4089 5.29309 13.6839 5.75966C13.9748 6.4049 14.1164 7.10551 14.0983 7.81099C14.0802 8.51646 13.903 9.2092 13.5794 9.83924H13.5809ZM5.36753 20.7401C3.35767 20.0309 1.5278 18.9029 0.00347865 17.4336V23.7122C-0.0131687 23.8286 -0.00628299 23.9472 0.0237426 24.061C0.0537683 24.1749 0.106345 24.2818 0.178465 24.3757C0.250585 24.4695 0.340836 24.5485 0.444055 24.6081C0.547273 24.6677 0.661433 24.7067 0.780011 24.7229H0.817344H4.49841C5.47505 24.7229 5.36156 23.696 5.36156 23.696L5.36753 20.7401ZM55.9422 6.8408H52.7659C52.463 6.8209 52.1626 6.9071 51.9182 7.08407C51.6738 7.26104 51.5012 7.51736 51.4309 7.80752L47.7423 17.7828C47.7423 17.7828 44.4854 8.68769 44.242 7.98648C44.173 7.66172 43.9934 7.36976 43.7328 7.1588C43.4721 6.94784 43.1461 6.83049 42.8084 6.82613H39.8859C38.8406 6.82613 38.8406 7.62562 38.9824 7.93808C39.1243 8.25054 43.1175 19.015 44.681 23.1342C44.9277 23.6409 45.1007 24.1791 45.1947 24.7332C45.0933 25.2803 44.8826 25.8023 44.575 26.2691C44.4564 26.4671 44.3205 26.6546 44.1688 26.8294C47.1808 25.9493 50.6812 22.7425 52.4404 19.279C54.2144 14.4807 56.5515 8.08184 56.6575 7.75471C56.771 7.26035 56.771 6.8452 55.9407 6.8452L55.9422 6.8408ZM41.7929 27.8182C41.5201 27.8106 41.248 27.7891 40.9775 27.7536C40.6445 27.7052 40.0099 27.7536 40.0099 28.314V30.7124C40.0099 31.6322 40.4653 31.6968 40.7013 31.7613C41.4557 31.9229 42.2259 32.0031 42.998 32.0004C43.9097 32.0238 44.8147 31.8406 45.6427 31.465C46.4004 31.0884 47.0732 30.5661 47.6214 29.9291C48.2428 29.2318 48.7685 28.4575 49.1849 27.626C49.6668 26.6714 50.096 25.692 50.4707 24.6921L50.944 23.4202C49.9973 24.3356 45.8294 28.1981 41.7914 27.8152L41.7929 27.8182ZM36.9874 9.71602C36.8144 9.31176 36.578 8.93657 36.287 8.60407C35.993 8.29601 35.6591 8.02722 35.2939 7.80458C34.8994 7.54052 34.4792 7.31547 34.0395 7.13272C33.5924 6.96234 33.1326 6.826 32.6642 6.72491C32.1282 6.60823 31.5841 6.53076 31.0364 6.49313C30.3813 6.43132 29.7234 6.40194 29.0652 6.40511C24.2129 6.40511 21.4502 7.90874 20.7772 10.916C20.7514 11.0182 20.7463 11.1244 20.7624 11.2285C20.7784 11.3327 20.8153 11.4326 20.8708 11.5227C20.9263 11.6128 20.9993 11.6913 21.0858 11.7536C21.1723 11.8158 21.2704 11.8607 21.3746 11.8856C21.4158 11.8959 21.4577 11.9033 21.5 11.9076H24.4867C25.3005 11.9076 25.3005 11.6597 25.6097 10.9717C25.7453 10.5974 25.9886 10.2697 26.31 10.0285C27.0736 9.54445 27.9765 9.31692 28.883 9.38008C29.7285 9.29615 30.5774 9.50358 31.2843 9.96686C31.8253 10.4622 32.1442 11.148 32.1714 11.8739C32.1714 12.8656 31.8622 13.5213 30.6093 13.5213C27.6376 13.4171 24.4463 13.7443 22.6469 14.7608C21.7609 15.2916 21.0335 16.0431 20.5386 16.9392C20.0437 17.8352 19.7989 18.8439 19.829 19.8629C19.8111 20.6552 19.9765 21.4412 20.3128 22.1616C20.63 22.7892 21.0898 23.3368 21.6568 23.762C22.2492 24.2382 22.9334 24.5919 23.6683 24.8021C24.5009 25.0241 25.3608 25.1317 26.2234 25.1219C27.3869 25.1412 28.5462 24.9793 29.6581 24.6422C30.6358 24.2457 31.5597 23.7318 32.4088 23.1122V23.6726C32.4088 24.2241 32.579 24.72 33.2227 24.72H36.6827C37.3831 24.72 37.5459 24.2315 37.5459 23.6241V13.1545C37.5502 12.5017 37.5042 11.8495 37.4085 11.2035C37.3321 10.6923 37.1907 10.1925 36.9874 9.71602ZM32.2595 20.0008C32.2595 20.0008 31.3635 21.8403 28.1886 21.8403C27.427 21.8742 26.6743 21.6687 26.0397 21.2536C25.7603 21.0402 25.5395 20.7616 25.3974 20.4432C25.2553 20.1248 25.1963 19.7766 25.2259 19.4301C25.191 18.9648 25.3009 18.5001 25.5409 18.0975C25.7809 17.6948 26.1397 17.3733 26.5699 17.1754C27.8547 16.6899 29.226 16.4639 30.6019 16.5109C30.7933 16.4826 30.9885 16.4916 31.1763 16.5374C31.3642 16.5832 31.541 16.6649 31.6968 16.7778C31.8525 16.8907 31.984 17.0327 32.0839 17.1955C32.1838 17.3584 32.25 17.539 32.2789 17.727C32.2911 17.8007 32.2966 17.8753 32.2953 17.95L32.2595 20.0008Z" fill="white" />
                                            <path d="M111.386 13.2679C111.787 13.9015 112 14.6327 112 15.3788C112 16.1249 111.787 16.8561 111.386 17.4897C110.572 18.7058 106.135 23.3575 104.666 24.8567C103.397 26.1521 101.679 27.4635 99.9768 27.4635H64.7341C59.9555 27.4635 59.6792 25.8631 59.6792 22.2969V7.7492C59.6792 4.09357 60.7783 3.03003 64.0427 3.03003H100.057C101.743 3.03003 103.25 3.87793 104.944 5.58985C106.428 7.0524 110.8 12.4038 111.386 13.2679Z" fill="#33CCCC" />
                                            <path d="M67.6814 8.65282V8.56481C67.6814 8.09245 67.6814 7.63623 66.8675 7.63623H63.9181C63.2252 7.63623 63.1924 8.00443 63.1924 8.58095V12.42C64.3569 10.8264 65.8972 9.53384 67.6814 8.65282Z" fill="white" />
                                            <path d="M87.4735 22.5356V22.3288V13.0664C87.4735 9.19077 85.7312 7.25293 82.2468 7.25293C81.2768 7.26329 80.3291 7.54024 79.511 8.05242C78.6077 8.6069 77.801 9.3003 77.1217 10.1061C76.8153 9.23717 76.2184 8.49571 75.4282 8.00254C74.5304 7.51589 73.5139 7.28046 72.4894 7.32188C70.9824 7.3276 69.5196 7.82274 68.3289 8.73015C68.0691 8.9854 63.1754 12.729 63.1754 16.6311V22.5576C63.1754 22.7424 63.0784 23.4612 63.8997 23.4612H66.97C67.9227 23.4612 67.8331 22.8466 67.8331 22.5899V12.9872C68.3453 12.3066 69.3952 10.6841 71.1304 10.6841C71.4076 10.659 71.6867 10.7072 71.9385 10.8238C72.1904 10.9404 72.4058 11.1211 72.5625 11.3472C72.913 12.0295 73.0679 12.7927 73.0105 13.5549V21.0364V22.5723C73.0105 22.7571 72.912 23.4759 73.7348 23.4759H76.7603C77.713 23.4759 77.6234 22.8613 77.6234 22.6045V22.3962V12.955C78.1775 12.2758 79.2527 10.6519 80.9207 10.6519C81.2013 10.6291 81.4831 10.6783 81.7385 10.7945C81.994 10.9107 82.2144 11.09 82.3782 11.3149C82.7322 11.9961 82.8873 12.7602 82.8262 13.5227V21.0041V22.5385C82.8262 22.7234 82.7291 23.4436 83.5505 23.4436H86.6208C87.587 23.3923 87.4735 22.7835 87.4735 22.5356Z" fill="white" />
                                            <path d="M104.4 18.7694C103.879 20.1476 102.924 21.3263 101.673 22.1333C100.422 22.9403 98.9414 23.3335 97.447 23.2554C92.7579 23.2554 89.6309 20.1205 89.6309 15.4175C89.6309 10.7144 92.8878 7.41968 97.2842 7.41968C101.681 7.41968 104.612 10.4108 104.8 15.2341C104.8 15.8502 104.651 16.393 103.855 16.393H93.9063C93.9705 18.9763 95.2324 20.3919 97.4798 20.3919C98.0753 20.4056 98.6624 20.252 99.172 19.9489C99.6815 19.6459 100.092 19.2061 100.356 18.6814C100.46 18.5327 100.6 18.4117 100.763 18.3292C100.927 18.2468 101.109 18.2055 101.292 18.2091H103.858C103.925 18.2059 103.992 18.2158 104.056 18.2382C104.119 18.2607 104.177 18.2951 104.227 18.3397C104.277 18.3842 104.317 18.438 104.346 18.4979C104.375 18.5578 104.391 18.6227 104.394 18.6888C104.395 18.7261 104.393 18.7634 104.386 18.8003L104.4 18.7694ZM97.3006 10.4078C95.4369 10.4078 94.1751 11.6797 93.8973 13.7745H100.574C100.402 11.9393 99.3928 10.4034 97.3006 10.4034V10.4078Z" fill="white" />
                                        </svg>
                                    </div>

                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </AccountLayout>
    );
}

export const getServerSideProps = withSession(async function ({ req, res, locale }) {
    const user = req.session.get('user');

    if (!user) {
        return {
            redirect: {
                destination: '/login',
                permanent: false,
            },
        }
    }

    return {
        props: { user, ...(await serverSideTranslations(locale, ['common'])), },
    }
});